/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DeltAttributes {
  export type ItemIdStruct = {
    awarded: boolean;
    itemName: string;
    itemType: string;
    lvl: BigNumberish;
  };

  export type ItemIdStructOutput = [boolean, string, string, BigNumber] & {
    awarded: boolean;
    itemName: string;
    itemType: string;
    lvl: BigNumber;
  };

  export type StatStruct = {
    trait: string;
    statKey: string;
    tier: BigNumberish;
    value: BigNumberish;
  };

  export type StatStructOutput = [string, string, BigNumber, BigNumber] & {
    trait: string;
    statKey: string;
    tier: BigNumber;
    value: BigNumber;
  };

  export type AttrStruct = {
    attrKey: string;
    stats: DeltAttributes.StatStruct[];
  };

  export type AttrStructOutput = [string, DeltAttributes.StatStructOutput[]] & {
    attrKey: string;
    stats: DeltAttributes.StatStructOutput[];
  };
}

export interface DeltAttributesInterface extends utils.Interface {
  functions: {
    "tokenURI((bool,string,string,uint256),string,(string,(string,string,uint256,uint256)[])[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "tokenURI"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [DeltAttributes.ItemIdStruct, string, DeltAttributes.AttrStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;

  events: {};
}

export interface DeltAttributes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeltAttributesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    tokenURI(
      _itemItem: DeltAttributes.ItemIdStruct,
      encodedSVG: string,
      _attributes: DeltAttributes.AttrStruct[],
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  tokenURI(
    _itemItem: DeltAttributes.ItemIdStruct,
    encodedSVG: string,
    _attributes: DeltAttributes.AttrStruct[],
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    tokenURI(
      _itemItem: DeltAttributes.ItemIdStruct,
      encodedSVG: string,
      _attributes: DeltAttributes.AttrStruct[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    tokenURI(
      _itemItem: DeltAttributes.ItemIdStruct,
      encodedSVG: string,
      _attributes: DeltAttributes.AttrStruct[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    tokenURI(
      _itemItem: DeltAttributes.ItemIdStruct,
      encodedSVG: string,
      _attributes: DeltAttributes.AttrStruct[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
