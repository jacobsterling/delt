/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace DeltTrader {
  export type TransactionStruct = {
    buyer: string;
    seller: string;
    price: BigNumberish;
    auctioned: boolean;
    completed: boolean;
  };

  export type TransactionStructOutput = [
    string,
    string,
    BigNumber,
    boolean,
    boolean
  ] & {
    buyer: string;
    seller: string;
    price: BigNumber;
    auctioned: boolean;
    completed: boolean;
  };
}

export interface DeltTraderInterface extends utils.Interface {
  functions: {
    "activeAuctions(uint256)": FunctionFragment;
    "addListing(uint256,uint256,bool)": FunctionFragment;
    "auctions(uint256)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "bid(uint256)": FunctionFragment;
    "endAuction(uint256)": FunctionFragment;
    "getListings(uint256)": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "isAuctioned(uint256)": FunctionFragment;
    "isListed(uint256)": FunctionFragment;
    "purchace(uint256)": FunctionFragment;
    "removeListing(uint256)": FunctionFragment;
    "transactions(uint256,uint256)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeAuctions"
      | "addListing"
      | "auctions"
      | "balances"
      | "bid"
      | "endAuction"
      | "getListings"
      | "getPrice"
      | "isAuctioned"
      | "isListed"
      | "purchace"
      | "removeListing"
      | "transactions"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeAuctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addListing",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuctioned",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isListed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchace",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeAuctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuctioned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isListed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchace", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AuctionEnd(address,uint256,uint256,address)": EventFragment;
    "AuctionStart(address,uint256,uint256,uint256)": EventFragment;
    "BidPlaced(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionStart"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
}

export interface AuctionEndEventObject {
  contractAddr: string;
  _tokenId: BigNumber;
  highestBid: BigNumber;
  highestBidder: string;
}
export type AuctionEndEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  AuctionEndEventObject
>;

export type AuctionEndEventFilter = TypedEventFilter<AuctionEndEvent>;

export interface AuctionStartEventObject {
  contractAddr: string;
  _tokenId: BigNumber;
  price: BigNumber;
  endAt: BigNumber;
}
export type AuctionStartEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  AuctionStartEventObject
>;

export type AuctionStartEventFilter = TypedEventFilter<AuctionStartEvent>;

export interface BidPlacedEventObject {
  contractAddr: string;
  _tokenId: BigNumber;
  highestBid: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface DeltTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DeltTraderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    addListing(
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _auction: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        seller: string;
        highestBid: BigNumber;
        highestBidder: string;
        endAt: BigNumber;
      }
    >;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bid(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getListings(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[DeltTrader.TransactionStructOutput[]]>;

    getPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAuctioned(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isListed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    purchace(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeListing(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, boolean] & {
        buyer: string;
        seller: string;
        price: BigNumber;
        auctioned: boolean;
        completed: boolean;
      }
    >;

    withdraw(
      amount: BigNumberish,
      destAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  activeAuctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  addListing(
    _tokenId: BigNumberish,
    _price: BigNumberish,
    _auction: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber] & {
      seller: string;
      highestBid: BigNumber;
      highestBidder: string;
      endAt: BigNumber;
    }
  >;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bid(
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getListings(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<DeltTrader.TransactionStructOutput[]>;

  getPrice(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isAuctioned(
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isListed(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  purchace(
    _tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeListing(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transactions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, boolean] & {
      buyer: string;
      seller: string;
      price: BigNumber;
      auctioned: boolean;
      completed: boolean;
    }
  >;

  withdraw(
    amount: BigNumberish,
    destAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addListing(
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _auction: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber] & {
        seller: string;
        highestBid: BigNumber;
        highestBidder: string;
        endAt: BigNumber;
      }
    >;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    endAuction(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getListings(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<DeltTrader.TransactionStructOutput[]>;

    getPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuctioned(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isListed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    purchace(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    removeListing(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, boolean] & {
        buyer: string;
        seller: string;
        price: BigNumber;
        auctioned: boolean;
        completed: boolean;
      }
    >;

    withdraw(
      amount: BigNumberish,
      destAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionEnd(address,uint256,uint256,address)"(
      contractAddr?: null,
      _tokenId?: null,
      highestBid?: null,
      highestBidder?: null
    ): AuctionEndEventFilter;
    AuctionEnd(
      contractAddr?: null,
      _tokenId?: null,
      highestBid?: null,
      highestBidder?: null
    ): AuctionEndEventFilter;

    "AuctionStart(address,uint256,uint256,uint256)"(
      contractAddr?: null,
      _tokenId?: null,
      price?: null,
      endAt?: null
    ): AuctionStartEventFilter;
    AuctionStart(
      contractAddr?: null,
      _tokenId?: null,
      price?: null,
      endAt?: null
    ): AuctionStartEventFilter;

    "BidPlaced(address,uint256,uint256)"(
      contractAddr?: null,
      _tokenId?: null,
      highestBid?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      contractAddr?: null,
      _tokenId?: null,
      highestBid?: null
    ): BidPlacedEventFilter;
  };

  estimateGas: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addListing(
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _auction: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endAuction(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getListings(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuctioned(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isListed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    purchace(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeListing(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      destAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeAuctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addListing(
      _tokenId: BigNumberish,
      _price: BigNumberish,
      _auction: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getListings(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuctioned(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isListed(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    purchace(
      _tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeListing(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      destAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
