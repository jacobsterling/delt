generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model diesel_schema_migrations {
  version String   @id @db.VarChar(50)
  run_on  DateTime @default(now()) @db.Timestamp(6)

  @@map("__diesel_schema_migrations")
}

model accounts {
  account_id      String            @id @db.VarChar
  user_id         String            @db.VarChar(50)
  last_active     DateTime?         @db.Timestamp(6)
  rewards         Json              @default("{}")
  users           users             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player_sessions player_sessions[]
}

model games {
  id         String     @id @db.VarChar(50)
  creator    String     @db.VarChar
  config     Json
  created_at DateTime   @default(now()) @db.Timestamp(6)
  ended_at   DateTime?  @db.Timestamp(6)
  expiry     DateTime?  @db.Timestamp(6)
  accounts   users      @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sessions   sessions[]
}

model roles {
  user_id    String   @db.VarChar(50)
  role       String   @db.VarChar
  grant_date DateTime @default(now()) @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, role])
}

model sessions {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  game_id         String            @db.VarChar
  pool_id         String?
  creator         String            @db.VarChar
  password        String?           @db.VarChar
  private         Boolean           @default(false)
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  started_at      DateTime?         @db.Timestamp(6)
  ended_at        DateTime?         @db.Timestamp(6)
  last_update     DateTime?         @default(now()) @db.Timestamp(6)
  duration        BigInt            @default(0)
  logs            Json              @default("{}")
  state           Json
  player_sessions player_sessions[]
  users           users             @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  games           games             @relation(fields: [game_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pools           pools?            @relation(fields: [pool_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  whitelist       whitelist[]
}

model user_sessions {
  auth_token String    @id
  user_id    String    @db.VarChar(50)
  started_at DateTime  @default(now()) @db.Timestamp(6)
  ended_at   DateTime? @db.Timestamp(6)
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              String            @id @db.VarChar(50)
  password        String            @db.VarChar
  email           String            @unique @db.VarChar
  created_at      DateTime          @default(now()) @db.Timestamp(6)
  last_login      DateTime?         @db.Timestamp(6)
  settings        Json              @default("{}")
  accounts        accounts[]
  games           games[]
  player_sessions player_sessions[]
  roles           roles[]
  sessions        sessions[]
  user_sessions   user_sessions[]
  whitelist       whitelist[]
}

model whitelist {
  session_id String   @db.Uuid
  user_id    String   @db.VarChar(50)
  sessions   sessions @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([session_id, user_id])
}

model player_sessions {
  session_id  String    @db.Uuid
  user_id     String    @db.VarChar(50)
  account_id  String?   @db.VarChar
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  ended_at    DateTime? @db.Timestamp(6)
  resolved_at DateTime? @db.Timestamp(6)
  info        Json?
  accounts    accounts? @relation(fields: [account_id], references: [account_id], onDelete: NoAction, onUpdate: NoAction)
  sessions    sessions  @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([session_id, user_id])
}

model pools {
  id            String     @id
  result        Json?
  registered_at DateTime   @default(now()) @db.Timestamp(6)
  resolved_at   DateTime?  @db.Timestamp(6)
  sessions      sessions[]
}
